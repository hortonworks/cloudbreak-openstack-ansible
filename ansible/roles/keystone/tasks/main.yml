---
- name: install keystone
  yum: name={{ item }} state=latest
  become: true
  with_items:
    - openstack-keystone
    - httpd
    - mod_wsgi
    - python-openstackclient
    - memcached
    - python-memcached

- name: ensure memcached is running
  become: true
  service: name={{ item }} state=started enabled=yes
  with_items:
    - memcached

- name: write the keystone config file
  template: src=keystone.conf.j2 dest=/etc/keystone/keystone.conf backup=yes
  become: true
  register: keystone_cfg
  notify:
    - restart httpd

- name: populate identitydb
  become: true
  shell: /bin/sh -c "keystone-manage db_sync" keystone
  when: keystone_cfg.changed

- name: create keystone-manage
  become: true
  template: src=scripts/keystone-manage.sh.j2 dest=/opt/scripts/keystone-manage.sh mode="a+x"
  register: keystone_manage

- name: execute keystone-manage
  become: true
  shell: /opt/scripts/keystone-manage.sh
  when: keystone_manage.changed

- name: create httpd config
  become: true
  template: src=httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf
  notify:
    - restart httpd

- name: link wsgi-keystone.conf
  become: true
  file: src=/usr/share/keystone/wsgi-keystone.conf dest=/etc/httpd/conf.d/wsgi-keystone.conf state=link

- name: Trigger handlers
  meta: flush_handlers

- name: ensure httpd service is running
  become: true
  service: name={{ item }} state=started enabled=yes
  with_items:
    - httpd

#
##- name: periodic task that purges expired tokens hourly
##  become: true
##  shell: crontab -l -u keystone 2>&1 | grep -q token_flush || echo '@hourly /usr/bin/keystone-manage token_flush >/var/log/keystone/keystone-tokenflush.log 2>&1' >> /var/spool/cron/crontabs/keystone
##  changed_when: false
#

- name: Creates scripts
  become: true
  file: path=/opt/scripts state=directory mode="a+x"

- name: write helper scripts
  become: true
  template: src=scripts/{{ item }}.j2 dest=/opt/scripts/{{ item }} mode="a+x"
  with_items:
    - admin-openrc.sh
    - demo-openrc.sh

- name: write shell profile
  template: src=bashrc.j2 dest=~/.bashrc

- name: create keystone-manage
  become: true
  template: src=scripts/keystone-init.sh.j2 dest=/opt/scripts/keystone-init.sh mode="a+x"
  register: keystone_entities

- name: execute keystone-entities
  become: true
  shell: /opt/scripts/keystone-init.sh
  when: keystone_entities.changed

- name: restart keystone components by handlers
  shell: echo 'Restarting keystone components....'
  tags:
    - restart-components
  notify:
    - restart httpd